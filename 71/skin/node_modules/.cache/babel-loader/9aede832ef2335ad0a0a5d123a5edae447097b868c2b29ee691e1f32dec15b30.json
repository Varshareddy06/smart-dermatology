{"ast":null,"code":"import { useState, useCallback } from 'react';\n\n/**\n * Custom hook to generate a Pollinations chat response based on the given messages and fetch the response.\n * \n * @param {Array} initMessages - The initial array of message objects to send.\n * @param {number} [seed=-1] - The seed for random text generation.\n * @param {boolean} [jsonMode=false] - Whether to parse the response as JSON.\n * @returns {Array} - The array of messages with the assistant's response added.\n */\nconst usePollinationsChat = (initMessages = [], options = {}) => {\n  const {\n    seed = 42,\n    jsonMode = false,\n    model = \"openai\"\n  } = options;\n  const [messages, setMessages] = useState(initMessages);\n  const sendUserMessage = useCallback(userMessage => {\n    const updatedMessages = [...messages, {\n      role: \"user\",\n      content: userMessage\n    }];\n    setMessages(updatedMessages);\n    const requestBody = {\n      messages: updatedMessages,\n      jsonMode: jsonMode,\n      seed: seed,\n      model: model\n    };\n    fetch(`https://text.pollinations.ai/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.text();\n    }).then(data => {\n      let assistantMessage;\n      try {\n        assistantMessage = jsonMode ? JSON.parse(data) : data;\n      } catch (error) {\n        console.error(\"Error parsing response:\", error);\n        assistantMessage = `Sorry, I encountered an error while processing the response: ${error.message}`;\n      }\n      setMessages(prevMessages => [...prevMessages, {\n        role: \"assistant\",\n        content: assistantMessage\n      }]);\n    }).catch(error => {\n      console.error(\"Error fetching chat:\", error);\n      const errorMessage = `I'm sorry, but I encountered an error while trying to respond: ${error.message}. Please try again later.`;\n      setMessages(prevMessages => [...prevMessages, {\n        role: \"assistant\",\n        content: errorMessage\n      }]);\n    });\n  }, [messages, jsonMode, seed, model]);\n  return {\n    sendUserMessage,\n    messages\n  };\n};\nexport default usePollinationsChat;","map":{"version":3,"names":["useState","useCallback","usePollinationsChat","initMessages","options","seed","jsonMode","model","messages","setMessages","sendUserMessage","userMessage","updatedMessages","role","content","requestBody","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","status","text","data","assistantMessage","parse","error","console","message","prevMessages","catch","errorMessage"],"sources":["C:/Users/varsh/OneDrive/Desktop/71/skin/node_modules/@pollinations/react/src/hooks/usePollinationsChat.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\n/**\n * Custom hook to generate a Pollinations chat response based on the given messages and fetch the response.\n * \n * @param {Array} initMessages - The initial array of message objects to send.\n * @param {number} [seed=-1] - The seed for random text generation.\n * @param {boolean} [jsonMode=false] - Whether to parse the response as JSON.\n * @returns {Array} - The array of messages with the assistant's response added.\n */\nconst usePollinationsChat = (initMessages = [], options = {}) => {\n    const { seed = 42, jsonMode = false, model = \"openai\" } = options;\n\n    const [messages, setMessages] = useState(initMessages);\n\n    const sendUserMessage = useCallback((userMessage) => {\n        const updatedMessages = [...messages, { role: \"user\", content: userMessage }];\n        setMessages(updatedMessages);\n\n        const requestBody = {\n            messages: updatedMessages,\n            jsonMode: jsonMode,\n            seed: seed,\n            model: model\n        };\n\n        fetch(`https://text.pollinations.ai/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.text();\n            })\n            .then((data) => {\n                let assistantMessage;\n                try {\n                    assistantMessage = jsonMode ? JSON.parse(data) : data;\n                } catch (error) {\n                    console.error(\"Error parsing response:\", error);\n                    assistantMessage = `Sorry, I encountered an error while processing the response: ${error.message}`;\n                }\n                setMessages(prevMessages => [...prevMessages, { role: \"assistant\", content: assistantMessage }]);\n            })\n            .catch((error) => {\n                console.error(\"Error fetching chat:\", error);\n                const errorMessage = `I'm sorry, but I encountered an error while trying to respond: ${error.message}. Please try again later.`;\n                setMessages(prevMessages => [...prevMessages, { role: \"assistant\", content: errorMessage }]);\n            });\n    }, [messages, jsonMode, seed, model]);\n\n    return { sendUserMessage, messages };\n};\n\nexport default usePollinationsChat;\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGA,CAACC,YAAY,GAAG,EAAE,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC7D,MAAM;IAAEC,IAAI,GAAG,EAAE;IAAEC,QAAQ,GAAG,KAAK;IAAEC,KAAK,GAAG;EAAS,CAAC,GAAGH,OAAO;EAEjE,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAACG,YAAY,CAAC;EAEtD,MAAMO,eAAe,GAAGT,WAAW,CAAEU,WAAW,IAAK;IACjD,MAAMC,eAAe,GAAG,CAAC,GAAGJ,QAAQ,EAAE;MAAEK,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEH;IAAY,CAAC,CAAC;IAC7EF,WAAW,CAACG,eAAe,CAAC;IAE5B,MAAMG,WAAW,GAAG;MAChBP,QAAQ,EAAEI,eAAe;MACzBN,QAAQ,EAAEA,QAAQ;MAClBD,IAAI,EAAEA,IAAI;MACVE,KAAK,EAAEA;IACX,CAAC;IAEDS,KAAK,CAAC,+BAA+B,EAAE;MACnCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,WAAW;IACpC,CAAC,CAAC,CACGO,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;MAC7D;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;MACZ,IAAIC,gBAAgB;MACpB,IAAI;QACAA,gBAAgB,GAAGvB,QAAQ,GAAGc,IAAI,CAACU,KAAK,CAACF,IAAI,CAAC,GAAGA,IAAI;MACzD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CF,gBAAgB,GAAG,gEAAgEE,KAAK,CAACE,OAAO,EAAE;MACtG;MACAxB,WAAW,CAACyB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAErB,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEe;MAAiB,CAAC,CAAC,CAAC;IACpG,CAAC,CAAC,CACDM,KAAK,CAAEJ,KAAK,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMK,YAAY,GAAG,kEAAkEL,KAAK,CAACE,OAAO,2BAA2B;MAC/HxB,WAAW,CAACyB,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE;QAAErB,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEsB;MAAa,CAAC,CAAC,CAAC;IAChG,CAAC,CAAC;EACV,CAAC,EAAE,CAAC5B,QAAQ,EAAEF,QAAQ,EAAED,IAAI,EAAEE,KAAK,CAAC,CAAC;EAErC,OAAO;IAAEG,eAAe;IAAEF;EAAS,CAAC;AACxC,CAAC;AAED,eAAeN,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}