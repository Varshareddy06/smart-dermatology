{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varsh\\\\OneDrive\\\\Desktop\\\\71\\\\skin\\\\src\\\\components\\\\FoodRecommendation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleGenAI } from '@google/genai';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ai = new GoogleGenAI({\n  apiKey: process.env.REACT_APP_GOOGLE_GENAI_API_KEY\n});\nconst styles = {\n  container: {\n    textAlign: 'center',\n    padding: '20px',\n    fontFamily: 'Arial, sans-serif',\n    color: 'white',\n    backgroundImage: 'url(\"/1.jpg\")',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    minHeight: '100vh',\n    paddingTop: '80px'\n  },\n  header: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: 1000,\n    fontSize: '2rem',\n    fontWeight: 'bold',\n    color: '#61dafb',\n    background: 'rgba(0, 0, 0, 0.8)',\n    padding: '15px',\n    textAlign: 'center',\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.5)'\n  },\n  list: {\n    textAlign: 'left',\n    margin: '20px auto',\n    maxWidth: '600px',\n    color: '#ddd'\n  },\n  loading: {\n    fontSize: '1.2rem',\n    color: '#61dafb',\n    marginTop: '20px'\n  }\n};\nfunction FoodRecommendation({\n  diseaseName\n}) {\n  _s();\n  const [recommendations, setRecommendations] = useState({\n    bestFoods: [],\n    foodsToAvoid: []\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchRecommendations = async () => {\n      setLoading(true);\n      setRecommendations({\n        bestFoods: [],\n        foodsToAvoid: []\n      });\n      const prompt = `\n        Based on the disease \"${diseaseName}\", provide a list of:\n        1. Best foods to eat to help manage or improve the condition.\n        2. Foods to avoid that may worsen the condition.\n      `;\n      const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\n      let modelIndex = 0;\n      while (modelIndex < models.length) {\n        try {\n          const result = await ai.models.generateContent({\n            model: models[modelIndex],\n            contents: [prompt],\n            config: {\n              maxOutputTokens: 300,\n              temperature: 0.7\n            }\n          });\n          if (result.text) {\n            const [bestFoods, foodsToAvoid] = result.text.split('\\n\\n').map(section => section.split('\\n').filter(item => item.trim() !== '').map(item => item.trim()));\n            setRecommendations({\n              bestFoods: bestFoods || [],\n              foodsToAvoid: foodsToAvoid || []\n            });\n            break;\n          }\n        } catch (error) {\n          console.error(`Error with model ${models[modelIndex]}:`, error.message);\n          if (modelIndex === models.length - 1) {\n            setRecommendations({\n              bestFoods: ['Failed to fetch recommendations. Please try again later.'],\n              foodsToAvoid: []\n            });\n          }\n        }\n        modelIndex++;\n      }\n      setLoading(false);\n    };\n    if (diseaseName) {\n      fetchRecommendations();\n    }\n  }, [diseaseName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      style: styles.header,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Food Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.loading,\n      children: \"Loading recommendations...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Based on your skin condition, \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: diseaseName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 44\n        }, this), \", here are some dietary recommendations:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Best Foods to Eat:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: styles.list,\n        children: recommendations.bestFoods.map((food, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: food\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Foods to Avoid:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: styles.list,\n        children: recommendations.foodsToAvoid.map((food, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: food\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(FoodRecommendation, \"i6b+8iyxJb+4R7VmNd5p2MPjANc=\");\n_c = FoodRecommendation;\nexport default FoodRecommendation;\nvar _c;\n$RefreshReg$(_c, \"FoodRecommendation\");","map":{"version":3,"names":["React","useState","useEffect","GoogleGenAI","jsxDEV","_jsxDEV","Fragment","_Fragment","ai","apiKey","process","env","REACT_APP_GOOGLE_GENAI_API_KEY","styles","container","textAlign","padding","fontFamily","color","backgroundImage","backgroundSize","backgroundPosition","minHeight","paddingTop","header","position","top","left","right","zIndex","fontSize","fontWeight","background","boxShadow","list","margin","maxWidth","loading","marginTop","FoodRecommendation","diseaseName","_s","recommendations","setRecommendations","bestFoods","foodsToAvoid","setLoading","fetchRecommendations","prompt","models","modelIndex","length","result","generateContent","model","contents","config","maxOutputTokens","temperature","text","split","map","section","filter","item","trim","error","console","message","style","children","fileName","_jsxFileName","lineNumber","columnNumber","food","index","_c","$RefreshReg$"],"sources":["C:/Users/varsh/OneDrive/Desktop/71/skin/src/components/FoodRecommendation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { GoogleGenAI } from '@google/genai';\r\n\r\nconst ai = new GoogleGenAI({ apiKey: process.env.REACT_APP_GOOGLE_GENAI_API_KEY });\r\n\r\nconst styles = {\r\n  container: {\r\n    textAlign: 'center',\r\n    padding: '20px',\r\n    fontFamily: 'Arial, sans-serif',\r\n    color: 'white',\r\n    backgroundImage: 'url(\"/1.jpg\")',\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center',\r\n    minHeight: '100vh',\r\n    paddingTop: '80px',\r\n  },\r\n  header: {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    zIndex: 1000,\r\n    fontSize: '2rem',\r\n    fontWeight: 'bold',\r\n    color: '#61dafb',\r\n    background: 'rgba(0, 0, 0, 0.8)',\r\n    padding: '15px',\r\n    textAlign: 'center',\r\n    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.5)',\r\n  },\r\n  list: {\r\n    textAlign: 'left',\r\n    margin: '20px auto',\r\n    maxWidth: '600px',\r\n    color: '#ddd',\r\n  },\r\n  loading: {\r\n    fontSize: '1.2rem',\r\n    color: '#61dafb',\r\n    marginTop: '20px',\r\n  },\r\n};\r\n\r\nfunction FoodRecommendation({ diseaseName }) {\r\n  const [recommendations, setRecommendations] = useState({ bestFoods: [], foodsToAvoid: [] });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchRecommendations = async () => {\r\n      setLoading(true);\r\n      setRecommendations({ bestFoods: [], foodsToAvoid: [] });\r\n\r\n      const prompt = `\r\n        Based on the disease \"${diseaseName}\", provide a list of:\r\n        1. Best foods to eat to help manage or improve the condition.\r\n        2. Foods to avoid that may worsen the condition.\r\n      `;\r\n\r\n      const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\r\n      let modelIndex = 0;\r\n\r\n      while (modelIndex < models.length) {\r\n        try {\r\n          const result = await ai.models.generateContent({\r\n            model: models[modelIndex],\r\n            contents: [prompt],\r\n            config: {\r\n              maxOutputTokens: 300,\r\n              temperature: 0.7,\r\n            },\r\n          });\r\n\r\n          if (result.text) {\r\n            const [bestFoods, foodsToAvoid] = result.text.split('\\n\\n').map((section) =>\r\n              section\r\n                .split('\\n')\r\n                .filter((item) => item.trim() !== '')\r\n                .map((item) => item.trim())\r\n            );\r\n\r\n            setRecommendations({\r\n              bestFoods: bestFoods || [],\r\n              foodsToAvoid: foodsToAvoid || [],\r\n            });\r\n            break;\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error with model ${models[modelIndex]}:`, error.message);\r\n          if (modelIndex === models.length - 1) {\r\n            setRecommendations({\r\n              bestFoods: ['Failed to fetch recommendations. Please try again later.'],\r\n              foodsToAvoid: [],\r\n            });\r\n          }\r\n        }\r\n        modelIndex++;\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    if (diseaseName) {\r\n      fetchRecommendations();\r\n    }\r\n  }, [diseaseName]);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <header style={styles.header}>\r\n        <h2>Food Recommendations</h2>\r\n      </header>\r\n      {loading ? (\r\n        <p style={styles.loading}>Loading recommendations...</p>\r\n      ) : (\r\n        <>\r\n          <p>Based on your skin condition, <strong>{diseaseName}</strong>, here are some dietary recommendations:</p>\r\n          <h3>Best Foods to Eat:</h3>\r\n          <ul style={styles.list}>\r\n            {recommendations.bestFoods.map((food, index) => (\r\n              <li key={index}>{food}</li>\r\n            ))}\r\n          </ul>\r\n          <h3>Foods to Avoid:</h3>\r\n          <ul style={styles.list}>\r\n            {recommendations.foodsToAvoid.map((food, index) => (\r\n              <li key={index}>{food}</li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FoodRecommendation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}