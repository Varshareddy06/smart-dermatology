{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varsh\\\\OneDrive\\\\Desktop\\\\71\\\\skin\\\\src\\\\components\\\\FoodRecommendation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleGenAI } from '@google/genai';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ai = new GoogleGenAI({\n  apiKey: process.env.REACT_APP_GOOGLE_GENAI_API_KEY\n});\nconst styles = {\n  container: {\n    textAlign: 'center',\n    fontFamily: 'Arial, sans-serif',\n    color: 'white',\n    backgroundImage: 'url(\"/1.jpg\")',\n    backgroundSize: 'auto',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'calc(100% - 150px) center',\n    backgroundColor: '#000000',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    // Center content vertically\n    alignItems: 'center',\n    // Center content horizontally\n    padding: '20px',\n    margin: '0',\n    overflow: 'hidden' // Prevent scrolling\n  },\n  content: {\n    background: 'rgba(0, 0, 0, 0.8)',\n    // Semi-transparent background\n    padding: '30px',\n    borderRadius: '15px',\n    boxShadow: '0 10px 20px rgba(0, 0, 0, 0.7)',\n    maxWidth: '600px',\n    textAlign: 'left'\n  },\n  title: {\n    fontSize: '2rem',\n    fontWeight: 'bold',\n    color: '#61dafb',\n    marginBottom: '20px',\n    textAlign: 'center'\n  },\n  list: {\n    textAlign: 'left',\n    margin: '20px 0',\n    paddingLeft: '20px',\n    color: '#ddd',\n    lineHeight: '1.6'\n  },\n  loading: {\n    fontSize: '1.2rem',\n    color: '#61dafb',\n    marginTop: '20px',\n    textAlign: 'center'\n  }\n};\nfunction FoodRecommendation({\n  diseaseName\n}) {\n  _s();\n  const [recommendations, setRecommendations] = useState({\n    bestFoods: [],\n    foodsToAvoid: []\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchRecommendations = async () => {\n      console.log(\"Fetching food recommendations for disease:\", diseaseName);\n      setLoading(true);\n      setRecommendations({\n        bestFoods: [],\n        foodsToAvoid: []\n      });\n      const prompt = `\n        Based on the disease \"${diseaseName}\", provide a list of:\n        1. Best foods to eat to help manage or improve the condition.\n        2. Foods to avoid that may worsen the condition.\n        Provide the response in the format:\n        Best Foods:\n        - [Food Name]\n        Foods to Avoid:\n        - [Food Name]\n      `;\n      const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\n      let modelIndex = 0;\n      while (modelIndex < models.length) {\n        try {\n          console.log(`Trying model: ${models[modelIndex]}`);\n          const result = await ai.models.generateContent({\n            model: models[modelIndex],\n            contents: [prompt],\n            config: {\n              maxOutputTokens: 300,\n              temperature: 0.7\n            }\n          });\n          if (result.text) {\n            console.log(\"Response received:\", result.text);\n            const sections = result.text.split('Foods to Avoid:');\n            const bestFoods = sections[0].replace('Best Foods:', '').replace(/\\*/g, '') // Remove asterisks\n            .replace(/(Important Note:|Disclaimer:|This information is for general knowledge purposes only[\\s\\S]*?$)/gi, '') // Remove disclaimers\n            .replace(/(Please consult a healthcare professional[\\s\\S]*?$)/gi, '') // Remove consultation messages\n            .replace(/(The AI-generated content is not a substitute[\\s\\S]*?$)/gi, '') // Remove AI disclaimer messages\n            .split('\\n').filter(item => item.trim() !== '').map(item => item.trim().replace('- ', ''));\n            const foodsToAvoid = sections[1] ? sections[1].replace(/\\*/g, '') // Remove asterisks\n            .replace(/(Important Note:|Disclaimer:|This information is for general knowledge purposes only[\\s\\S]*?$)/gi, '') // Remove disclaimers\n            .replace(/(Please consult a healthcare professional[\\s\\S]*?$)/gi, '') // Remove consultation messages\n            .replace(/(The AI-generated content is not a substitute[\\s\\S]*?$)/gi, '') // Remove AI disclaimer messages\n            .split('\\n').filter(item => item.trim() !== '').map(item => item.trim().replace('- ', '')) : [];\n            console.log(\"Parsed recommendations:\", {\n              bestFoods,\n              foodsToAvoid\n            });\n            setRecommendations({\n              bestFoods: bestFoods || [],\n              foodsToAvoid: foodsToAvoid || []\n            });\n            break;\n          }\n        } catch (error) {\n          console.error(`Error with model ${models[modelIndex]}:`, error.message);\n          if (modelIndex === models.length - 1) {\n            setRecommendations({\n              bestFoods: ['Failed to fetch recommendations. Please try again later.'],\n              foodsToAvoid: []\n            });\n          }\n        }\n        modelIndex++;\n      }\n      setLoading(false);\n    };\n    if (diseaseName) {\n      fetchRecommendations();\n    }\n  }, [diseaseName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: styles.title,\n        children: \"Food Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.loading,\n        children: \"Loading recommendations...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Based on your skin condition, \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: diseaseName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 46\n          }, this), \", here are some dietary recommendations:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Best Foods to Eat:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: styles.list,\n          children: recommendations.bestFoods.map((food, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: food\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Foods to Avoid:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          style: styles.list,\n          children: recommendations.foodsToAvoid.map((food, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: food\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n_s(FoodRecommendation, \"i6b+8iyxJb+4R7VmNd5p2MPjANc=\");\n_c = FoodRecommendation;\nexport default FoodRecommendation;\nvar _c;\n$RefreshReg$(_c, \"FoodRecommendation\");","map":{"version":3,"names":["React","useState","useEffect","GoogleGenAI","jsxDEV","_jsxDEV","Fragment","_Fragment","ai","apiKey","process","env","REACT_APP_GOOGLE_GENAI_API_KEY","styles","container","textAlign","fontFamily","color","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","backgroundColor","minHeight","display","flexDirection","justifyContent","alignItems","padding","margin","overflow","content","background","borderRadius","boxShadow","maxWidth","title","fontSize","fontWeight","marginBottom","list","paddingLeft","lineHeight","loading","marginTop","FoodRecommendation","diseaseName","_s","recommendations","setRecommendations","bestFoods","foodsToAvoid","setLoading","fetchRecommendations","console","log","prompt","models","modelIndex","length","result","generateContent","model","contents","config","maxOutputTokens","temperature","text","sections","split","replace","filter","item","trim","map","error","message","style","children","fileName","_jsxFileName","lineNumber","columnNumber","food","index","_c","$RefreshReg$"],"sources":["C:/Users/varsh/OneDrive/Desktop/71/skin/src/components/FoodRecommendation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { GoogleGenAI } from '@google/genai';\r\n\r\nconst ai = new GoogleGenAI({ apiKey: process.env.REACT_APP_GOOGLE_GENAI_API_KEY });\r\n\r\nconst styles = {\r\n  container: {\r\n    textAlign: 'center',\r\n    fontFamily: 'Arial, sans-serif',\r\n    color: 'white',\r\n    backgroundImage: 'url(\"/1.jpg\")',\r\n    backgroundSize: 'auto',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'calc(100% - 150px) center',\r\n    backgroundColor: '#000000',\r\n    minHeight: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center', // Center content vertically\r\n    alignItems: 'center', // Center content horizontally\r\n    padding: '20px',\r\n    margin: '0',\r\n    overflow: 'hidden', // Prevent scrolling\r\n  },\r\n  content: {\r\n    background: 'rgba(0, 0, 0, 0.8)', // Semi-transparent background\r\n    padding: '30px',\r\n    borderRadius: '15px',\r\n    boxShadow: '0 10px 20px rgba(0, 0, 0, 0.7)',\r\n    maxWidth: '600px',\r\n    textAlign: 'left',\r\n  },\r\n  title: {\r\n    fontSize: '2rem',\r\n    fontWeight: 'bold',\r\n    color: '#61dafb',\r\n    marginBottom: '20px',\r\n    textAlign: 'center',\r\n  },\r\n  list: {\r\n    textAlign: 'left',\r\n    margin: '20px 0',\r\n    paddingLeft: '20px',\r\n    color: '#ddd',\r\n    lineHeight: '1.6',\r\n  },\r\n  loading: {\r\n    fontSize: '1.2rem',\r\n    color: '#61dafb',\r\n    marginTop: '20px',\r\n    textAlign: 'center',\r\n  },\r\n};\r\n\r\nfunction FoodRecommendation({ diseaseName }) {\r\n  const [recommendations, setRecommendations] = useState({ bestFoods: [], foodsToAvoid: [] });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchRecommendations = async () => {\r\n      console.log(\"Fetching food recommendations for disease:\", diseaseName);\r\n      setLoading(true);\r\n      setRecommendations({ bestFoods: [], foodsToAvoid: [] });\r\n\r\n      const prompt = `\r\n        Based on the disease \"${diseaseName}\", provide a list of:\r\n        1. Best foods to eat to help manage or improve the condition.\r\n        2. Foods to avoid that may worsen the condition.\r\n        Provide the response in the format:\r\n        Best Foods:\r\n        - [Food Name]\r\n        Foods to Avoid:\r\n        - [Food Name]\r\n      `;\r\n\r\n      const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\r\n      let modelIndex = 0;\r\n\r\n      while (modelIndex < models.length) {\r\n        try {\r\n          console.log(`Trying model: ${models[modelIndex]}`);\r\n          const result = await ai.models.generateContent({\r\n            model: models[modelIndex],\r\n            contents: [prompt],\r\n            config: {\r\n              maxOutputTokens: 300,\r\n              temperature: 0.7,\r\n            },\r\n          });\r\n\r\n          if (result.text) {\r\n            console.log(\"Response received:\", result.text);\r\n            const sections = result.text.split('Foods to Avoid:');\r\n            const bestFoods = sections[0]\r\n              .replace('Best Foods:', '')\r\n              .replace(/\\*/g, '') // Remove asterisks\r\n              .replace(/(Important Note:|Disclaimer:|This information is for general knowledge purposes only[\\s\\S]*?$)/gi, '') // Remove disclaimers\r\n              .replace(/(Please consult a healthcare professional[\\s\\S]*?$)/gi, '') // Remove consultation messages\r\n              .replace(/(The AI-generated content is not a substitute[\\s\\S]*?$)/gi, '') // Remove AI disclaimer messages\r\n              .split('\\n')\r\n              .filter((item) => item.trim() !== '')\r\n              .map((item) => item.trim().replace('- ', ''));\r\n\r\n            const foodsToAvoid = sections[1]\r\n              ? sections[1]\r\n                  .replace(/\\*/g, '') // Remove asterisks\r\n                  .replace(/(Important Note:|Disclaimer:|This information is for general knowledge purposes only[\\s\\S]*?$)/gi, '') // Remove disclaimers\r\n                  .replace(/(Please consult a healthcare professional[\\s\\S]*?$)/gi, '') // Remove consultation messages\r\n                  .replace(/(The AI-generated content is not a substitute[\\s\\S]*?$)/gi, '') // Remove AI disclaimer messages\r\n                  .split('\\n')\r\n                  .filter((item) => item.trim() !== '')\r\n                  .map((item) => item.trim().replace('- ', ''))\r\n              : [];\r\n\r\n            console.log(\"Parsed recommendations:\", { bestFoods, foodsToAvoid });\r\n            setRecommendations({\r\n              bestFoods: bestFoods || [],\r\n              foodsToAvoid: foodsToAvoid || [],\r\n            });\r\n            break;\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error with model ${models[modelIndex]}:`, error.message);\r\n          if (modelIndex === models.length - 1) {\r\n            setRecommendations({\r\n              bestFoods: ['Failed to fetch recommendations. Please try again later.'],\r\n              foodsToAvoid: [],\r\n            });\r\n          }\r\n        }\r\n        modelIndex++;\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    if (diseaseName) {\r\n      fetchRecommendations();\r\n    }\r\n  }, [diseaseName]);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.content}>\r\n        <h2 style={styles.title}>Food Recommendations</h2>\r\n        {loading ? (\r\n          <p style={styles.loading}>Loading recommendations...</p>\r\n        ) : (\r\n          <>\r\n            <p>Based on your skin condition, <strong>{diseaseName}</strong>, here are some dietary recommendations:</p>\r\n            <h3>Best Foods to Eat:</h3>\r\n            <ul style={styles.list}>\r\n              {recommendations.bestFoods.map((food, index) => (\r\n                <li key={index}>{food}</li>\r\n              ))}\r\n            </ul>\r\n            <h3>Foods to Avoid:</h3>\r\n            <ul style={styles.list}>\r\n              {recommendations.foodsToAvoid.map((food, index) => (\r\n                <li key={index}>{food}</li>\r\n              ))}\r\n            </ul>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FoodRecommendation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}