{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varsh\\\\OneDrive\\\\Desktop\\\\71\\\\skin\\\\src\\\\components\\\\CausePrediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GoogleGenAI } from '@google/genai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ai = new GoogleGenAI({\n  apiKey: process.env.REACT_APP_GOOGLE_GENAI_API_KEY\n});\nconst styles = {\n  container: {\n    textAlign: 'center',\n    padding: '20px',\n    fontFamily: 'Arial, sans-serif',\n    color: 'white',\n    backgroundImage: 'url(\"/1.jpg\")',\n    backgroundSize: 'auto',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'calc(100% - 150px) center',\n    backgroundColor: '#000000',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    // Move content closer to the top\n    alignItems: 'center',\n    paddingTop: '60px' // Adjust padding to move content up\n  },\n  questionContainer: {\n    margin: '20px auto',\n    maxWidth: '600px',\n    textAlign: 'left',\n    background: 'rgba(0, 0, 0, 0.7)',\n    padding: '20px',\n    borderRadius: '10px',\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.6)'\n  },\n  questionLabel: {\n    display: 'block',\n    marginBottom: '10px',\n    fontSize: '1.1rem',\n    color: '#ddd'\n  },\n  input: {\n    width: '100%',\n    padding: '10px',\n    marginBottom: '15px',\n    borderRadius: '8px',\n    border: '1px solid #666',\n    fontSize: '1rem',\n    backgroundColor: '#222',\n    color: 'white'\n  },\n  button: {\n    padding: '12px 24px',\n    background: 'linear-gradient(90deg, #61dafb, #21a1f1)',\n    border: 'none',\n    borderRadius: '8px',\n    color: 'white',\n    fontSize: '1.1rem',\n    cursor: 'pointer',\n    transition: 'transform 0.3s ease, box-shadow 0.3s ease'\n  },\n  loading: {\n    fontSize: '1.2rem',\n    color: '#61dafb',\n    marginTop: '20px'\n  },\n  response: {\n    marginTop: '20px',\n    padding: '20px',\n    background: 'rgba(0, 0, 0, 0.8)',\n    borderRadius: '12px',\n    boxShadow: '0 6px 12px rgba(0, 0, 0, 0.7)',\n    color: '#e0e6ed',\n    textAlign: 'left',\n    lineHeight: '1.6',\n    fontSize: '1.1rem'\n  },\n  responseTitle: {\n    fontSize: '1.5rem',\n    fontWeight: 'bold',\n    color: '#61dafb',\n    marginBottom: '15px',\n    borderBottom: '1px solid #444',\n    paddingBottom: '10px'\n  },\n  responseItem: {\n    marginBottom: '10px',\n    padding: '10px',\n    background: 'rgba(255, 255, 255, 0.1)',\n    borderRadius: '8px',\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.5)'\n  },\n  title: {\n    fontSize: '2rem',\n    fontWeight: 'bold',\n    color: '#61dafb',\n    marginBottom: '20px'\n  }\n};\nfunction CausePrediction({\n  diseaseName\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const generateQuestions = async () => {\n    console.log(\"Generating questions for disease:\", diseaseName);\n    setLoading(true);\n    setQuestions([]);\n    setResponse(null);\n    const prompt = `\n      Generate a list of specific, insightful, and relevant questions to help identify potential causes for the following skin condition:\n      Disease: ${diseaseName}\n      Ensure the questions are detailed and cover aspects such as lifestyle, environmental factors, medical history, and symptoms.\n    `;\n    const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\n    let modelIndex = 0;\n    while (modelIndex < models.length) {\n      try {\n        console.log(`Trying model: ${models[modelIndex]}`);\n        const result = await ai.models.generateContent({\n          model: models[modelIndex],\n          contents: [prompt],\n          config: {\n            maxOutputTokens: 200,\n            temperature: 0.7\n          }\n        });\n        if (result.text) {\n          console.log(\"Questions generated successfully:\", result.text);\n          const generatedQuestions = result.text.split('\\n').filter(q => q.trim() !== '');\n          setQuestions(generatedQuestions);\n          break;\n        }\n      } catch (error) {\n        console.error(`Error with model ${models[modelIndex]}:`, error.message);\n        if (modelIndex === models.length - 1) {\n          setQuestions(['Failed to generate questions. Please try again later.']);\n        }\n      }\n      modelIndex++;\n    }\n    setLoading(false);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(\"Submitting answers for disease:\", diseaseName);\n    setLoading(true);\n    setResponse(null);\n    const answers = Array.from(e.target.elements).filter(el => el.name.startsWith('question')).map(el => el.value);\n    console.log(\"Collected answers:\", answers);\n    const prompt = `\n      Disease: ${diseaseName}\n      ${answers.map((answer, index) => `Question ${index + 1}: ${answer}`).join('\\n')}\n      Based on the above information, provide a concise summary of the potential causes for the disease.\n    `;\n    const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\n    let modelIndex = 0;\n    while (modelIndex < models.length) {\n      try {\n        console.log(`Trying model: ${models[modelIndex]}`);\n        const result = await ai.models.generateContent({\n          model: models[modelIndex],\n          contents: [prompt],\n          config: {\n            maxOutputTokens: 300,\n            temperature: 0.7\n          }\n        });\n        if (result.text) {\n          console.log(\"Response received:\", result.text);\n          setResponse(result.text.trim());\n          break;\n        } else {\n          console.warn(\"No summary identified.\");\n          setResponse('No summary identified. Please try again.');\n        }\n      } catch (error) {\n        console.error(`Error with model ${models[modelIndex]}:`, error.message);\n        if (modelIndex === models.length - 1) {\n          setResponse('All models failed. Please try again later.');\n        }\n      }\n      modelIndex++;\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Cause Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Answer the following questions to help us predict potential causes of your skin condition, \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: diseaseName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 101\n      }, this), \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), questions.length === 0 && !loading && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateQuestions,\n      style: styles.button,\n      children: \"Generate Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: styles.loading,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      style: styles.questionContainer,\n      children: [questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.questionLabel,\n          children: [question, /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: `question${index + 1}`,\n            style: styles.input,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: styles.button,\n        disabled: loading,\n        children: loading ? 'Analyzing...' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.response,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.responseTitle,\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), response === 'All models failed. Please try again later.' ? 'We encountered an issue processing your request. Please try again later.' : response]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(CausePrediction, \"06WFHj57wNqdpE88a/XN9Wu+bf8=\");\n_c = CausePrediction;\nexport default CausePrediction;\nvar _c;\n$RefreshReg$(_c, \"CausePrediction\");","map":{"version":3,"names":["React","useState","GoogleGenAI","jsxDEV","_jsxDEV","ai","apiKey","process","env","REACT_APP_GOOGLE_GENAI_API_KEY","styles","container","textAlign","padding","fontFamily","color","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","backgroundColor","minHeight","display","flexDirection","justifyContent","alignItems","paddingTop","questionContainer","margin","maxWidth","background","borderRadius","boxShadow","questionLabel","marginBottom","fontSize","input","width","border","button","cursor","transition","loading","marginTop","response","lineHeight","responseTitle","fontWeight","borderBottom","paddingBottom","responseItem","title","CausePrediction","diseaseName","_s","questions","setQuestions","setResponse","setLoading","generateQuestions","console","log","prompt","models","modelIndex","length","result","generateContent","model","contents","config","maxOutputTokens","temperature","text","generatedQuestions","split","filter","q","trim","error","message","handleSubmit","e","preventDefault","answers","Array","from","target","elements","el","name","startsWith","map","value","answer","index","join","warn","style","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","question","type","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/varsh/OneDrive/Desktop/71/skin/src/components/CausePrediction.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { GoogleGenAI } from '@google/genai';\r\n\r\nconst ai = new GoogleGenAI({ apiKey: process.env.REACT_APP_GOOGLE_GENAI_API_KEY });\r\n\r\nconst styles = {\r\n  container: {\r\n    textAlign: 'center',\r\n    padding: '20px',\r\n    fontFamily: 'Arial, sans-serif',\r\n    color: 'white',\r\n    backgroundImage: 'url(\"/1.jpg\")',\r\n    backgroundSize: 'auto',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'calc(100% - 150px) center',\r\n    backgroundColor: '#000000',\r\n    minHeight: '100vh',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start', // Move content closer to the top\r\n    alignItems: 'center',\r\n    paddingTop: '60px', // Adjust padding to move content up\r\n  },\r\n  questionContainer: {\r\n    margin: '20px auto',\r\n    maxWidth: '600px',\r\n    textAlign: 'left',\r\n    background: 'rgba(0, 0, 0, 0.7)',\r\n    padding: '20px',\r\n    borderRadius: '10px',\r\n    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.6)',\r\n  },\r\n  questionLabel: {\r\n    display: 'block',\r\n    marginBottom: '10px',\r\n    fontSize: '1.1rem',\r\n    color: '#ddd',\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    padding: '10px',\r\n    marginBottom: '15px',\r\n    borderRadius: '8px',\r\n    border: '1px solid #666',\r\n    fontSize: '1rem',\r\n    backgroundColor: '#222',\r\n    color: 'white',\r\n  },\r\n  button: {\r\n    padding: '12px 24px',\r\n    background: 'linear-gradient(90deg, #61dafb, #21a1f1)',\r\n    border: 'none',\r\n    borderRadius: '8px',\r\n    color: 'white',\r\n    fontSize: '1.1rem',\r\n    cursor: 'pointer',\r\n    transition: 'transform 0.3s ease, box-shadow 0.3s ease',\r\n  },\r\n  loading: {\r\n    fontSize: '1.2rem',\r\n    color: '#61dafb',\r\n    marginTop: '20px',\r\n  },\r\n  response: {\r\n    marginTop: '20px',\r\n    padding: '20px',\r\n    background: 'rgba(0, 0, 0, 0.8)',\r\n    borderRadius: '12px',\r\n    boxShadow: '0 6px 12px rgba(0, 0, 0, 0.7)',\r\n    color: '#e0e6ed',\r\n    textAlign: 'left',\r\n    lineHeight: '1.6',\r\n    fontSize: '1.1rem',\r\n  },\r\n  responseTitle: {\r\n    fontSize: '1.5rem',\r\n    fontWeight: 'bold',\r\n    color: '#61dafb',\r\n    marginBottom: '15px',\r\n    borderBottom: '1px solid #444',\r\n    paddingBottom: '10px',\r\n  },\r\n  responseItem: {\r\n    marginBottom: '10px',\r\n    padding: '10px',\r\n    background: 'rgba(255, 255, 255, 0.1)',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.5)',\r\n  },\r\n  title: {\r\n    fontSize: '2rem',\r\n    fontWeight: 'bold',\r\n    color: '#61dafb',\r\n    marginBottom: '20px',\r\n  },\r\n};\r\n\r\nfunction CausePrediction({ diseaseName }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [response, setResponse] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const generateQuestions = async () => {\r\n    console.log(\"Generating questions for disease:\", diseaseName);\r\n    setLoading(true);\r\n    setQuestions([]);\r\n    setResponse(null);\r\n\r\n    const prompt = `\r\n      Generate a list of specific, insightful, and relevant questions to help identify potential causes for the following skin condition:\r\n      Disease: ${diseaseName}\r\n      Ensure the questions are detailed and cover aspects such as lifestyle, environmental factors, medical history, and symptoms.\r\n    `;\r\n\r\n    const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\r\n    let modelIndex = 0;\r\n\r\n    while (modelIndex < models.length) {\r\n      try {\r\n        console.log(`Trying model: ${models[modelIndex]}`);\r\n        const result = await ai.models.generateContent({\r\n          model: models[modelIndex],\r\n          contents: [prompt],\r\n          config: {\r\n            maxOutputTokens: 200,\r\n            temperature: 0.7,\r\n          },\r\n        });\r\n\r\n        if (result.text) {\r\n          console.log(\"Questions generated successfully:\", result.text);\r\n          const generatedQuestions = result.text.split('\\n').filter((q) => q.trim() !== '');\r\n          setQuestions(generatedQuestions);\r\n          break;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error with model ${models[modelIndex]}:`, error.message);\r\n        if (modelIndex === models.length - 1) {\r\n          setQuestions(['Failed to generate questions. Please try again later.']);\r\n        }\r\n      }\r\n      modelIndex++;\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Submitting answers for disease:\", diseaseName);\r\n    setLoading(true);\r\n    setResponse(null);\r\n\r\n    const answers = Array.from(e.target.elements)\r\n      .filter((el) => el.name.startsWith('question'))\r\n      .map((el) => el.value);\r\n\r\n    console.log(\"Collected answers:\", answers);\r\n\r\n    const prompt = `\r\n      Disease: ${diseaseName}\r\n      ${answers.map((answer, index) => `Question ${index + 1}: ${answer}`).join('\\n')}\r\n      Based on the above information, provide a concise summary of the potential causes for the disease.\r\n    `;\r\n\r\n    const models = ['gemini-2.5-flash-preview-04-17', 'gemini-2.0-flash', 'gemini-1.5'];\r\n    let modelIndex = 0;\r\n\r\n    while (modelIndex < models.length) {\r\n      try {\r\n        console.log(`Trying model: ${models[modelIndex]}`);\r\n        const result = await ai.models.generateContent({\r\n          model: models[modelIndex],\r\n          contents: [prompt],\r\n          config: {\r\n            maxOutputTokens: 300,\r\n            temperature: 0.7,\r\n          },\r\n        });\r\n\r\n        if (result.text) {\r\n          console.log(\"Response received:\", result.text);\r\n          setResponse(result.text.trim());\r\n          break;\r\n        } else {\r\n          console.warn(\"No summary identified.\");\r\n          setResponse('No summary identified. Please try again.');\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error with model ${models[modelIndex]}:`, error.message);\r\n        if (modelIndex === models.length - 1) {\r\n          setResponse('All models failed. Please try again later.');\r\n        }\r\n      }\r\n      modelIndex++;\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h2 style={styles.title}>Cause Prediction</h2>\r\n      <p>Answer the following questions to help us predict potential causes of your skin condition, <strong>{diseaseName}</strong>:</p>\r\n      {questions.length === 0 && !loading && (\r\n        <button onClick={generateQuestions} style={styles.button}>\r\n          Generate Questions\r\n        </button>\r\n      )}\r\n      {loading && <p style={styles.loading}>Loading...</p>}\r\n      {questions.length > 0 && (\r\n        <form onSubmit={handleSubmit} style={styles.questionContainer}>\r\n          {questions.map((question, index) => (\r\n            <div key={index}>\r\n              <label style={styles.questionLabel}>\r\n                {question}\r\n                <input type=\"text\" name={`question${index + 1}`} style={styles.input} required />\r\n              </label>\r\n            </div>\r\n          ))}\r\n          <button type=\"submit\" style={styles.button} disabled={loading}>\r\n            {loading ? 'Analyzing...' : 'Submit'}\r\n          </button>\r\n        </form>\r\n      )}\r\n      {response && (\r\n        <div style={styles.response}>\r\n          <div style={styles.responseTitle}>Summary</div>\r\n          {response === 'All models failed. Please try again later.'\r\n            ? 'We encountered an issue processing your request. Please try again later.'\r\n            : response}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CausePrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}